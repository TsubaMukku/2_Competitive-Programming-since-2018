

// 2021/01/10
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if (head == nullptr) return head;
        ListNode *sentinel = new ListNode(-1,head);
        ListNode *pre = sentinel;
        
        while (head != nullptr){
            if (head->next != nullptr && head->val == head->next->val){
                while(head->next != nullptr && head->val == head->next->val){
                    head = head->next;
                }
                pre->next = head->next;
            }
            else{
                pre = pre->next;
            }
            head = head->next;
        }
        
        return sentinel->next;
    }
};



// 2021/01/06

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        
        // sentinel
        ListNode *sentinel = new ListNode(0,head);
        
        // predecessor: the last node before the sublist of duplicates
        
        ListNode *pred = sentinel;
        
        while (head != nullptr){
            
            // if it's a beginning of duplicates sublist
            // skip all duplicates
            
            if (head->next != nullptr && head->val == head->next->val){
                
                // move till the end of duplicates sublist
                while(head->next != nullptr && head->val == head->next->val){
                    head = head->next;
                }
                
                // skip all duplicates
                pred->next = head->next;
                
            }
            else{
                pred = pred->next;
            }
            
            // move forward
            head = head->next;
        }
        
        return sentinel->next;
    }
};
